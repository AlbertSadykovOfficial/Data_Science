"""

	Группировка сходных наблюдений для извлечения информации из распределенных данных

	Кластеризация - деления набора данных на подмножества-кластеры. 
									В предеах кластера наблюдения имеют много общего,
									но при этом сильно отличаются от наблюдений в других кластерах.
	
	Один из важных аспектов алгоритмов кластеризации:
			Кол-во кластеров должно задаавться заранее.
	
	Одни из распространенных алгоритмов кластеризации:
		1) Алгоритм k-средних
		2) Алгоритм распростанения близости
		3) Спектральная кластеризация 

"""

import sklearn
from sklearn import cluster
from sklearn import datasets
import pandas as pd

# Загружаем набор данных с информацией об Ирисах из Scikit-learn
# Преобразуем данные во фрейм Pandas
# Вывод первых 5 наблюдений фрейма на экран. 
data = sklearn.datasets.load_iris()
X = pd.DataFrame(data.data, columns=list(data.feature_names)) 
print(X[:5])

# Инициализация кластерной модели k-средних с 3 классами (компромис сложности и скорости)
# Random_state - случайная затравка
model = cluster.KMeans(n_clusters=3, random_state=25)

# Подгока модели по данным.
# Все переменные считаются независимыми
# Нет целевой переменной (y)
results = model.fit(X) 

X["cluster"] = results.predict(X) # Принадлежность цвета к кластеру
X["target"] = data.target					# Добавляем целевую переменную
X["c"] = "lookatmeIamimportant"   # Добавление переменной - трюк для упрощения подсчета в будущем. 
																	# (Выбрао произвольно, т.к нужен столбец подсчета строк)
print(X[:5])

# 1) Выбираем столбцы cluster, target и c
# 2) Группируем по столбцам cluster и target
# 3) Вычислем строку группы простым подсчетом.
classification_result = X[["cluster", "target", "c"]].groupby(["cluster", "target"]).agg("count")

# Матрица позволяет увидеть насколько успещно прошла кластеризация
# cluster| target	 |		c    |
#	___0___|____0____|___50____|  - Для 0 кластера все идеально
#	 	 1   |    1    |   48    |
# _______|____2____|___14____|  - 14 неверных классификаций для кластера 1
#		 2   |    1    |    2    |  -  2 неверные классификаций для кластера 2
#	_______|____2____|___36____|

# Суммарное количесво неверных классификаций 14 + 2 = 16 из 150  
print(classification_result)